//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StoDescktopClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Station", Namespace="http://schemas.datacontract.org/2004/07/STO_Man_WcfService.Model")]
    [System.SerializableAttribute()]
    public partial class Station : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Service", Namespace="http://schemas.datacontract.org/2004/07/STO_Man_WcfService.Model")]
    [System.SerializableAttribute()]
    public partial class Service : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StationIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StationId {
            get {
                return this.StationIdField;
            }
            set {
                if ((this.StationIdField.Equals(value) != true)) {
                    this.StationIdField = value;
                    this.RaisePropertyChanged("StationId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServedCar", Namespace="http://schemas.datacontract.org/2004/07/STO_Man_WcfService.Model")]
    [System.SerializableAttribute()]
    public partial class ServedCar : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CarBrandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CarYearField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ServiceCompletDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ServiceIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CarBrand {
            get {
                return this.CarBrandField;
            }
            set {
                if ((object.ReferenceEquals(this.CarBrandField, value) != true)) {
                    this.CarBrandField = value;
                    this.RaisePropertyChanged("CarBrand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CarYear {
            get {
                return this.CarYearField;
            }
            set {
                if ((this.CarYearField.Equals(value) != true)) {
                    this.CarYearField = value;
                    this.RaisePropertyChanged("CarYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ServiceCompletDate {
            get {
                return this.ServiceCompletDateField;
            }
            set {
                if ((this.ServiceCompletDateField.Equals(value) != true)) {
                    this.ServiceCompletDateField = value;
                    this.RaisePropertyChanged("ServiceCompletDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ServiceId {
            get {
                return this.ServiceIdField;
            }
            set {
                if ((this.ServiceIdField.Equals(value) != true)) {
                    this.ServiceIdField = value;
                    this.RaisePropertyChanged("ServiceId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SummaryByStation", Namespace="http://schemas.datacontract.org/2004/07/STO_Man_WcfService.Model")]
    [System.SerializableAttribute()]
    public partial class SummaryByStation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CarBrandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CarYearField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ServiceCompleteDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CarBrand {
            get {
                return this.CarBrandField;
            }
            set {
                if ((object.ReferenceEquals(this.CarBrandField, value) != true)) {
                    this.CarBrandField = value;
                    this.RaisePropertyChanged("CarBrand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CarYear {
            get {
                return this.CarYearField;
            }
            set {
                if ((this.CarYearField.Equals(value) != true)) {
                    this.CarYearField = value;
                    this.RaisePropertyChanged("CarYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ServiceCompleteDate {
            get {
                return this.ServiceCompleteDateField;
            }
            set {
                if ((this.ServiceCompleteDateField.Equals(value) != true)) {
                    this.ServiceCompleteDateField = value;
                    this.RaisePropertyChanged("ServiceCompleteDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceName {
            get {
                return this.ServiceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceNameField, value) != true)) {
                    this.ServiceNameField = value;
                    this.RaisePropertyChanged("ServiceName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SummaryByAllStations", Namespace="http://schemas.datacontract.org/2004/07/STO_Man_WcfService.Model")]
    [System.SerializableAttribute()]
    public partial class SummaryByAllStations : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountCompletedServicesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal TotalPriceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountCompletedServices {
            get {
                return this.CountCompletedServicesField;
            }
            set {
                if ((this.CountCompletedServicesField.Equals(value) != true)) {
                    this.CountCompletedServicesField = value;
                    this.RaisePropertyChanged("CountCompletedServices");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StationName {
            get {
                return this.StationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StationNameField, value) != true)) {
                    this.StationNameField = value;
                    this.RaisePropertyChanged("StationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal TotalPrice {
            get {
                return this.TotalPriceField;
            }
            set {
                if ((this.TotalPriceField.Equals(value) != true)) {
                    this.TotalPriceField = value;
                    this.RaisePropertyChanged("TotalPrice");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IStoService")]
    public interface IStoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/SelectStations", ReplyAction="http://tempuri.org/IStoService/SelectStationsResponse")]
        StoDescktopClient.ServiceReference1.Station[] SelectStations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/SelectStations", ReplyAction="http://tempuri.org/IStoService/SelectStationsResponse")]
        System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.Station[]> SelectStationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/SelectStation", ReplyAction="http://tempuri.org/IStoService/SelectStationResponse")]
        StoDescktopClient.ServiceReference1.Station SelectStation(int stationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/SelectStation", ReplyAction="http://tempuri.org/IStoService/SelectStationResponse")]
        System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.Station> SelectStationAsync(int stationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/CreateStation", ReplyAction="http://tempuri.org/IStoService/CreateStationResponse")]
        StoDescktopClient.ServiceReference1.Station CreateStation(StoDescktopClient.ServiceReference1.Station station);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/CreateStation", ReplyAction="http://tempuri.org/IStoService/CreateStationResponse")]
        System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.Station> CreateStationAsync(StoDescktopClient.ServiceReference1.Station station);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/UpdateStation", ReplyAction="http://tempuri.org/IStoService/UpdateStationResponse")]
        StoDescktopClient.ServiceReference1.Station UpdateStation(StoDescktopClient.ServiceReference1.Station station);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/UpdateStation", ReplyAction="http://tempuri.org/IStoService/UpdateStationResponse")]
        System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.Station> UpdateStationAsync(StoDescktopClient.ServiceReference1.Station station);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/CreateOrUpdateStation", ReplyAction="http://tempuri.org/IStoService/CreateOrUpdateStationResponse")]
        StoDescktopClient.ServiceReference1.Station CreateOrUpdateStation(StoDescktopClient.ServiceReference1.Station station);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/CreateOrUpdateStation", ReplyAction="http://tempuri.org/IStoService/CreateOrUpdateStationResponse")]
        System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.Station> CreateOrUpdateStationAsync(StoDescktopClient.ServiceReference1.Station station);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/DeleteStation", ReplyAction="http://tempuri.org/IStoService/DeleteStationResponse")]
        void DeleteStation(StoDescktopClient.ServiceReference1.Station station);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/DeleteStation", ReplyAction="http://tempuri.org/IStoService/DeleteStationResponse")]
        System.Threading.Tasks.Task DeleteStationAsync(StoDescktopClient.ServiceReference1.Station station);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/SelectServices", ReplyAction="http://tempuri.org/IStoService/SelectServicesResponse")]
        StoDescktopClient.ServiceReference1.Service[] SelectServices(int stationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/SelectServices", ReplyAction="http://tempuri.org/IStoService/SelectServicesResponse")]
        System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.Service[]> SelectServicesAsync(int stationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/SelectService", ReplyAction="http://tempuri.org/IStoService/SelectServiceResponse")]
        StoDescktopClient.ServiceReference1.Service SelectService(int serviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/SelectService", ReplyAction="http://tempuri.org/IStoService/SelectServiceResponse")]
        System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.Service> SelectServiceAsync(int serviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/CreateService", ReplyAction="http://tempuri.org/IStoService/CreateServiceResponse")]
        StoDescktopClient.ServiceReference1.Service CreateService(StoDescktopClient.ServiceReference1.Service service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/CreateService", ReplyAction="http://tempuri.org/IStoService/CreateServiceResponse")]
        System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.Service> CreateServiceAsync(StoDescktopClient.ServiceReference1.Service service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/UpdateService", ReplyAction="http://tempuri.org/IStoService/UpdateServiceResponse")]
        StoDescktopClient.ServiceReference1.Service UpdateService(StoDescktopClient.ServiceReference1.Service service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/UpdateService", ReplyAction="http://tempuri.org/IStoService/UpdateServiceResponse")]
        System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.Service> UpdateServiceAsync(StoDescktopClient.ServiceReference1.Service service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/CreateOrUpdateService", ReplyAction="http://tempuri.org/IStoService/CreateOrUpdateServiceResponse")]
        StoDescktopClient.ServiceReference1.Service CreateOrUpdateService(StoDescktopClient.ServiceReference1.Service service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/CreateOrUpdateService", ReplyAction="http://tempuri.org/IStoService/CreateOrUpdateServiceResponse")]
        System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.Service> CreateOrUpdateServiceAsync(StoDescktopClient.ServiceReference1.Service service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/DeleteService", ReplyAction="http://tempuri.org/IStoService/DeleteServiceResponse")]
        void DeleteService(StoDescktopClient.ServiceReference1.Service service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/DeleteService", ReplyAction="http://tempuri.org/IStoService/DeleteServiceResponse")]
        System.Threading.Tasks.Task DeleteServiceAsync(StoDescktopClient.ServiceReference1.Service service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/SelectServedCars", ReplyAction="http://tempuri.org/IStoService/SelectServedCarsResponse")]
        StoDescktopClient.ServiceReference1.ServedCar[] SelectServedCars(int serviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/SelectServedCars", ReplyAction="http://tempuri.org/IStoService/SelectServedCarsResponse")]
        System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.ServedCar[]> SelectServedCarsAsync(int serviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/SelectServedCar", ReplyAction="http://tempuri.org/IStoService/SelectServedCarResponse")]
        StoDescktopClient.ServiceReference1.ServedCar SelectServedCar(int servedCarId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/SelectServedCar", ReplyAction="http://tempuri.org/IStoService/SelectServedCarResponse")]
        System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.ServedCar> SelectServedCarAsync(int servedCarId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/CreateServedCar", ReplyAction="http://tempuri.org/IStoService/CreateServedCarResponse")]
        StoDescktopClient.ServiceReference1.ServedCar CreateServedCar(StoDescktopClient.ServiceReference1.ServedCar servedCar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/CreateServedCar", ReplyAction="http://tempuri.org/IStoService/CreateServedCarResponse")]
        System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.ServedCar> CreateServedCarAsync(StoDescktopClient.ServiceReference1.ServedCar servedCar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/UpdateServedCar", ReplyAction="http://tempuri.org/IStoService/UpdateServedCarResponse")]
        StoDescktopClient.ServiceReference1.ServedCar UpdateServedCar(StoDescktopClient.ServiceReference1.ServedCar servedCar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/UpdateServedCar", ReplyAction="http://tempuri.org/IStoService/UpdateServedCarResponse")]
        System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.ServedCar> UpdateServedCarAsync(StoDescktopClient.ServiceReference1.ServedCar servedCar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/CreateOrUpdateServedCar", ReplyAction="http://tempuri.org/IStoService/CreateOrUpdateServedCarResponse")]
        StoDescktopClient.ServiceReference1.ServedCar CreateOrUpdateServedCar(StoDescktopClient.ServiceReference1.ServedCar servedCar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/CreateOrUpdateServedCar", ReplyAction="http://tempuri.org/IStoService/CreateOrUpdateServedCarResponse")]
        System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.ServedCar> CreateOrUpdateServedCarAsync(StoDescktopClient.ServiceReference1.ServedCar servedCar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/DeleteServedCar", ReplyAction="http://tempuri.org/IStoService/DeleteServedCarResponse")]
        void DeleteServedCar(StoDescktopClient.ServiceReference1.ServedCar servedCar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/DeleteServedCar", ReplyAction="http://tempuri.org/IStoService/DeleteServedCarResponse")]
        System.Threading.Tasks.Task DeleteServedCarAsync(StoDescktopClient.ServiceReference1.ServedCar servedCar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/SelectServedCarsByStation", ReplyAction="http://tempuri.org/IStoService/SelectServedCarsByStationResponse")]
        StoDescktopClient.ServiceReference1.SummaryByStation[] SelectServedCarsByStation(int stationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/SelectServedCarsByStation", ReplyAction="http://tempuri.org/IStoService/SelectServedCarsByStationResponse")]
        System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.SummaryByStation[]> SelectServedCarsByStationAsync(int stationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/SelectServedCarsByAllStation", ReplyAction="http://tempuri.org/IStoService/SelectServedCarsByAllStationResponse")]
        StoDescktopClient.ServiceReference1.SummaryByAllStations[] SelectServedCarsByAllStation(System.DateTime dateBegin, System.DateTime dateEnd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/SelectServedCarsByAllStation", ReplyAction="http://tempuri.org/IStoService/SelectServedCarsByAllStationResponse")]
        System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.SummaryByAllStations[]> SelectServedCarsByAllStationAsync(System.DateTime dateBegin, System.DateTime dateEnd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/LoadFirstData", ReplyAction="http://tempuri.org/IStoService/LoadFirstDataResponse")]
        void LoadFirstData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoService/LoadFirstData", ReplyAction="http://tempuri.org/IStoService/LoadFirstDataResponse")]
        System.Threading.Tasks.Task LoadFirstDataAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStoServiceChannel : StoDescktopClient.ServiceReference1.IStoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StoServiceClient : System.ServiceModel.ClientBase<StoDescktopClient.ServiceReference1.IStoService>, StoDescktopClient.ServiceReference1.IStoService {
        
        public StoServiceClient() {
        }
        
        public StoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public StoDescktopClient.ServiceReference1.Station[] SelectStations() {
            return base.Channel.SelectStations();
        }
        
        public System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.Station[]> SelectStationsAsync() {
            return base.Channel.SelectStationsAsync();
        }
        
        public StoDescktopClient.ServiceReference1.Station SelectStation(int stationId) {
            return base.Channel.SelectStation(stationId);
        }
        
        public System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.Station> SelectStationAsync(int stationId) {
            return base.Channel.SelectStationAsync(stationId);
        }
        
        public StoDescktopClient.ServiceReference1.Station CreateStation(StoDescktopClient.ServiceReference1.Station station) {
            return base.Channel.CreateStation(station);
        }
        
        public System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.Station> CreateStationAsync(StoDescktopClient.ServiceReference1.Station station) {
            return base.Channel.CreateStationAsync(station);
        }
        
        public StoDescktopClient.ServiceReference1.Station UpdateStation(StoDescktopClient.ServiceReference1.Station station) {
            return base.Channel.UpdateStation(station);
        }
        
        public System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.Station> UpdateStationAsync(StoDescktopClient.ServiceReference1.Station station) {
            return base.Channel.UpdateStationAsync(station);
        }
        
        public StoDescktopClient.ServiceReference1.Station CreateOrUpdateStation(StoDescktopClient.ServiceReference1.Station station) {
            return base.Channel.CreateOrUpdateStation(station);
        }
        
        public System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.Station> CreateOrUpdateStationAsync(StoDescktopClient.ServiceReference1.Station station) {
            return base.Channel.CreateOrUpdateStationAsync(station);
        }
        
        public void DeleteStation(StoDescktopClient.ServiceReference1.Station station) {
            base.Channel.DeleteStation(station);
        }
        
        public System.Threading.Tasks.Task DeleteStationAsync(StoDescktopClient.ServiceReference1.Station station) {
            return base.Channel.DeleteStationAsync(station);
        }
        
        public StoDescktopClient.ServiceReference1.Service[] SelectServices(int stationId) {
            return base.Channel.SelectServices(stationId);
        }
        
        public System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.Service[]> SelectServicesAsync(int stationId) {
            return base.Channel.SelectServicesAsync(stationId);
        }
        
        public StoDescktopClient.ServiceReference1.Service SelectService(int serviceId) {
            return base.Channel.SelectService(serviceId);
        }
        
        public System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.Service> SelectServiceAsync(int serviceId) {
            return base.Channel.SelectServiceAsync(serviceId);
        }
        
        public StoDescktopClient.ServiceReference1.Service CreateService(StoDescktopClient.ServiceReference1.Service service) {
            return base.Channel.CreateService(service);
        }
        
        public System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.Service> CreateServiceAsync(StoDescktopClient.ServiceReference1.Service service) {
            return base.Channel.CreateServiceAsync(service);
        }
        
        public StoDescktopClient.ServiceReference1.Service UpdateService(StoDescktopClient.ServiceReference1.Service service) {
            return base.Channel.UpdateService(service);
        }
        
        public System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.Service> UpdateServiceAsync(StoDescktopClient.ServiceReference1.Service service) {
            return base.Channel.UpdateServiceAsync(service);
        }
        
        public StoDescktopClient.ServiceReference1.Service CreateOrUpdateService(StoDescktopClient.ServiceReference1.Service service) {
            return base.Channel.CreateOrUpdateService(service);
        }
        
        public System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.Service> CreateOrUpdateServiceAsync(StoDescktopClient.ServiceReference1.Service service) {
            return base.Channel.CreateOrUpdateServiceAsync(service);
        }
        
        public void DeleteService(StoDescktopClient.ServiceReference1.Service service) {
            base.Channel.DeleteService(service);
        }
        
        public System.Threading.Tasks.Task DeleteServiceAsync(StoDescktopClient.ServiceReference1.Service service) {
            return base.Channel.DeleteServiceAsync(service);
        }
        
        public StoDescktopClient.ServiceReference1.ServedCar[] SelectServedCars(int serviceId) {
            return base.Channel.SelectServedCars(serviceId);
        }
        
        public System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.ServedCar[]> SelectServedCarsAsync(int serviceId) {
            return base.Channel.SelectServedCarsAsync(serviceId);
        }
        
        public StoDescktopClient.ServiceReference1.ServedCar SelectServedCar(int servedCarId) {
            return base.Channel.SelectServedCar(servedCarId);
        }
        
        public System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.ServedCar> SelectServedCarAsync(int servedCarId) {
            return base.Channel.SelectServedCarAsync(servedCarId);
        }
        
        public StoDescktopClient.ServiceReference1.ServedCar CreateServedCar(StoDescktopClient.ServiceReference1.ServedCar servedCar) {
            return base.Channel.CreateServedCar(servedCar);
        }
        
        public System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.ServedCar> CreateServedCarAsync(StoDescktopClient.ServiceReference1.ServedCar servedCar) {
            return base.Channel.CreateServedCarAsync(servedCar);
        }
        
        public StoDescktopClient.ServiceReference1.ServedCar UpdateServedCar(StoDescktopClient.ServiceReference1.ServedCar servedCar) {
            return base.Channel.UpdateServedCar(servedCar);
        }
        
        public System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.ServedCar> UpdateServedCarAsync(StoDescktopClient.ServiceReference1.ServedCar servedCar) {
            return base.Channel.UpdateServedCarAsync(servedCar);
        }
        
        public StoDescktopClient.ServiceReference1.ServedCar CreateOrUpdateServedCar(StoDescktopClient.ServiceReference1.ServedCar servedCar) {
            return base.Channel.CreateOrUpdateServedCar(servedCar);
        }
        
        public System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.ServedCar> CreateOrUpdateServedCarAsync(StoDescktopClient.ServiceReference1.ServedCar servedCar) {
            return base.Channel.CreateOrUpdateServedCarAsync(servedCar);
        }
        
        public void DeleteServedCar(StoDescktopClient.ServiceReference1.ServedCar servedCar) {
            base.Channel.DeleteServedCar(servedCar);
        }
        
        public System.Threading.Tasks.Task DeleteServedCarAsync(StoDescktopClient.ServiceReference1.ServedCar servedCar) {
            return base.Channel.DeleteServedCarAsync(servedCar);
        }
        
        public StoDescktopClient.ServiceReference1.SummaryByStation[] SelectServedCarsByStation(int stationId) {
            return base.Channel.SelectServedCarsByStation(stationId);
        }
        
        public System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.SummaryByStation[]> SelectServedCarsByStationAsync(int stationId) {
            return base.Channel.SelectServedCarsByStationAsync(stationId);
        }
        
        public StoDescktopClient.ServiceReference1.SummaryByAllStations[] SelectServedCarsByAllStation(System.DateTime dateBegin, System.DateTime dateEnd) {
            return base.Channel.SelectServedCarsByAllStation(dateBegin, dateEnd);
        }
        
        public System.Threading.Tasks.Task<StoDescktopClient.ServiceReference1.SummaryByAllStations[]> SelectServedCarsByAllStationAsync(System.DateTime dateBegin, System.DateTime dateEnd) {
            return base.Channel.SelectServedCarsByAllStationAsync(dateBegin, dateEnd);
        }
        
        public void LoadFirstData() {
            base.Channel.LoadFirstData();
        }
        
        public System.Threading.Tasks.Task LoadFirstDataAsync() {
            return base.Channel.LoadFirstDataAsync();
        }
    }
}
